plugins {
    id 'com.android.application' 
   // id 'com.android.library' 
    //id "com.android.application"
    id 'com.google.gms.google-services'
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.gotaxi.taxi.rider_flutter"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion
    //ndkVersion 23
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.wane.taxi.rider"
        //minSdkVersion flutter.minSdkVersion
        minSdkVersion 23
        //minSdk 19
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true






    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true // Activer la réduction du code
            shrinkResources true // Activer la suppression des ressources non utilisées
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Ensure tasks are correctly dependent
 /* afterEvaluate {
        tasks.named('mapReleaseSourceSetPaths').configure {
            dependsOn(tasks.named('processReleaseGoogleServices'))
        }
    }*/
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.0'
   // implementation 'com.google.android.gms:play-services-location:21.2.0'
    implementation(platform("com.google.firebase:firebase-bom:32.8.0"))  // Utilisez la version la plus récente
    implementation("com.google.firebase:firebase-auth")
    implementation 'com.google.firebase:firebase-firestore:24.4.0'
   // implementation 'com.google.firebase:firebase-firestore:24.6.0'


}
